{
  "name": "angular_record_store",
  "version": "2.3.2",
  "description": "An ActiveRecord-like ORM built ontop of Loki-js",
  "main": "src/index.coffee",
  "scripts": {
    "test": "karma start",
    "build-watch": "watchify src/index.coffee -o dist/standalone.js -v -s AngularRecordStore",
    "build": "browserify --standalone AngularRecordStore src/index.coffee > dist/standalone.js",
    "prepublish": "npm run build"
  },
  "browserify": {
    "transform": [
      "coffeeify"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/loomio/angular_record_store.git"
  },
  "keywords": [
    "orm",
    "lokijs",
    "activerecord"
  ],
  "author": {
    "name": "Robert Guthrie"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/loomio/angular_record_store/issues"
  },
  "homepage": "https://github.com/loomio/angular_record_store",
  "dependencies": {
    "coffeeify": "^1.1.0",
    "lodash": "^3.10.1",
    "moment": "^2.10.6"
  },
  "devDependencies": {
    "angular": "^1.4.3",
    "angular-mocks": "^1.4.3",
    "browserify": "^11.0.0",
    "coffee-script": "^1.9.3",
    "jasmine-core": "^2.3.4",
    "karma": "^0.13.9",
    "karma-browserify": "^4.3.0",
    "karma-chrome-launcher": "^0.2.0",
    "karma-jasmine": "^0.3.6",
    "karma-phantomjs-launcher": "^0.2.1",
    "lokijs": "^1.3.7",
    "phantomjs": "^1.9.18",
    "watchify": "^3.3.1"
  },
  "gitHead": "e10715bd233722cae744a53749f4f08458a862da",
  "readme": "![travis build badge](https://travis-ci.org/loomio/angular_record_store.svg)\n\n# RecordStore\n## A Rails/ActiveRecord like ORM for your AngularJS project\n\nHave you heard of [LokiJS](http://lokijs.org/)? It's a javascript\ndatabase library that behaves a lot like MongoDB. It's built with a focus on performance and has great querying and indexing features. I reckon it's really neat.\n\nHave you heard of [Active Model Serializers](https://github.com/rails-api/active_model_serializers)? It's a Rails JSON library for serializing your ActiveRecord models to Javascript. It makes it easy to specify how to serialize a record and it's relationships into JSON. It's a bit of a weirdo library in that the 0.8 branch was really good, the 0.9 branch was terrible and it's not super clear if the 1.0 branch is ready to use yet.. I've not tried it yet because 0.8 does the job.\n\nThat's where this ORM comes in. If you have a Rails app that serializes\nit's records with AMS then this allows you to define your models on your client so\nyou can use them kind of like you did on the server side.\n\nHere is a Coffeescript example of a client side model definition:\n\n```coffee\nclass DogModel extends BaseModel\n  @singular: 'dog'        # term for single (required)\n  @plural: 'dogs'         # term for many (required)\n  @indices: ['ownerId']   # index these columns for fast lookup\n\n  defaultValues: ->       # fn returning attributes for new records\n    name: null\n    age: 0\n    isFluffy: true\n\n  relationships: ->       # describe the relationships with other records\n    @hasMany 'fleas',     # creates method dog.fleas() so you can retrieve associated flea records.\n                          # optional arguments available (defaults shown)\n      from: 'fleas'       # collection that the associated records live in\n      with: 'dogId'       # foreign key\n      of: 'id'            # source key\n      sortBy: 'letter'    # optional sorting (not default acutally)\n      sortDesc: true      # But wait there's more! Chain anything from http://lokijs.org/#/docs#views\n\n    @belongsTo 'owner',   # creates dog.owner() \n      from: 'people'      # owner is a person record in the people collection\n      by: 'ownerId'       # by: 'ownerId', of: 'id' are the defaults\n      of: 'id'            # in this case. only specified here as example\n\n  ownerName: ->           # add any model methods you wish\n    @owner.name()         # this gives you dog.ownerName()\n\n  scratchSelf: ->\n    _.each _.sample(@fleas(), 5), (flea) -> # lodash is available for you\n      flea.awaken()\n\n``` \n\nOther things I really like about my library:\n  - Built specifically to work with Active Model Serializer with rails snake_case -> camel case\n  - withs with active model serializers - highlight embed_ids\n  - only ever one version of a record.. single source of truth\n  - rails/ActiveRecord like relationship declarations: hasMany, belongsTo\n  - makes relationships and computed attributes and generally being a model really easy.\n  - restfulClient makes http requests easy\n\nTo maybe do:\n  - automatically add index columns when specifying relationships\n\nTo find out how to use this for real, you should read the files in /test\n\nTo compile files from src to dist: npm run build\nTo run the tests: npm test\n",
  "readmeFilename": "readme.md",
  "_id": "angular_record_store@2.3.2",
  "_shasum": "272abb7633db46fed394f6b4ce6f215e8423b10f",
  "_from": "git://github.com/loomio/angular_record_store.git#2.3.2",
  "_resolved": "git://github.com/loomio/angular_record_store.git#e10715bd233722cae744a53749f4f08458a862da"
}
